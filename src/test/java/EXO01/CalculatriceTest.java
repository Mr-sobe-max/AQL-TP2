package EXO01;

import org.example.com.EXO01.Calculatrice;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class CalculatriceTest {

    @Mock
    private Calculatrice calculatrice;

    @Test
    public void testAdditionner() {
        // D√©finition du comportement de la m√©thode "additionner"
        when(calculatrice.additionner(2, 3)).thenReturn(5);

        // ‚úÖ Appel de la m√©thode √† tester
        int resultat = calculatrice.additionner(2, 3);

        // ‚úÖ V√©rification du r√©sultat
        assert(resultat == 5);

        // ‚úÖ V√©rification que la m√©thode "additionner" a √©t√© appel√©e avec les arguments 2 et 3
        verify(calculatrice).additionner(2, 3);

        // ‚úÖ V√©rification qu'aucune autre m√©thode n'a √©t√© appel√©e
        verifyNoMoreInteractions(calculatrice);

        // ‚õîÔ∏è Probl√®me ici : on ne peut pas v√©rifier l‚Äô√©tat r√©el car c‚Äôest un mock
        // La m√©thode suivante ne fonctionnera que sur un vrai objet, pas un mock :
        // verify(calculatrice).getResult();

        // üëâ Si on veut tester l'√©tat (comme result = 5), il faut utiliser une vraie instance :
        Calculatrice vraieCalculatrice = new Calculatrice();
        int vraiResultat = vraieCalculatrice.additionner(2, 3);
        assert(vraiResultat == 5);
        assert(vraieCalculatrice.getResult() == 5);
    }
}
