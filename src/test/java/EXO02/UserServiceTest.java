package EXO02;

import org.example.com.EXO02.UserService;
import org.example.com.EXO02.Utilisateur;
import org.example.com.EXO02.UtilisateurApi;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class UserServiceTest {

    @Mock
    private UtilisateurApi utilisateurApiMock;

    @Test
    public void testCreerUtilisateur()  {
        // ðŸ”¸ CrÃ©ation d'un nouvel utilisateur
        Utilisateur utilisateur = new Utilisateur("Jean", "Dupont", "jeandupont@email.com");

        // âœ… Configuration du comportement du mock (optionnel ici car la mÃ©thode retourne void)
        // â†’ Pas de thenReturn car la mÃ©thode est void, donc on fait simplement : doNothing()
        doNothing().when(utilisateurApiMock).creerUtilisateur(utilisateur);

        // âœ… CrÃ©ation du service avec le mock
        UserService userService = new UserService(utilisateurApiMock);

        // âœ… Appel de la mÃ©thode Ã  tester
        userService.creerUtilisateur(utilisateur);

        // âœ… VÃ©rification de l'appel Ã  l'API
        verify(utilisateurApiMock).creerUtilisateur(utilisateur);

        // âœ… Optionnel : vÃ©rifier qu'aucune autre mÃ©thode nâ€™a Ã©tÃ© appelÃ©e sur le mock
        verifyNoMoreInteractions(utilisateurApiMock);
    }
}
